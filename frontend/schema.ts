/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/authenticate/{member_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["authenticate_handler"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["login_handler"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/members/{member_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_member_handler"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/members/{member_id}/friend-requests": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["list_inbound_friend_requests_handler"];
    put?: never;
    post: operations["create_friend_request_handler"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/members/{member_id}/friend-requests/{friend_member_id}/accept": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["accept_friend_request_handler"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/members/{member_id}/friends": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["list_friends_handler"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/members/{member_id}/pools": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["list_pools_for_member_handler"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/members/{member_id}/pools/{pool_id}/expenses/{expense_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_expense_handler"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/members/{member_id}/pools/{pool_id}/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["list_members_of_pool_handler"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/pools": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["create_pool_handler"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/pools/{pool_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_pool_details_handler"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/pools/{pool_id}/expenses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["add_expense_handler"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/pools/{pool_id}/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["add_friend_to_pool_handler"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/pools/{pool_id}/members/{member_id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["remove_friend_from_pool_handler"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/pools/{pool_id}/members/{member_id}/expenses": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["get_pool_recent_expenses_handler"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/pools/{pool_id}/memberships": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["create_pool_membership_handler"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/signup": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["signup_handler"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AuthResult:
      | {
          /** Format: date-time */
          expires_at: string;
          /** Format: uuid */
          id: string;
          is_authenticated: boolean;
          token: string;
        }
      | {
          /** Format: date-time */
          expires_at?: string | null;
          /** Format: uuid */
          id?: string | null;
          is_authenticated: boolean;
          token?: string | null;
        };
    Expense: {
      /** Format: double */
      amount: number;
      category: components["schemas"]["ExpenseCategory"];
      description?: string | null;
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      inserted_at: string;
      is_settled: boolean;
      name: string;
      notes?: string | null;
      /** Format: uuid */
      paid_by_member_id: string;
      /** Format: uuid */
      pool_id: string;
      /** Format: date-time */
      updated_at: string;
    };
    /** @enum {string} */
    ExpenseCategory:
      | "FoodDining"
      | "Groceries"
      | "Transportation"
      | "HousingRent"
      | "Utilities"
      | "Healthcare"
      | "Entertainment"
      | "Shopping"
      | "Education"
      | "Travel"
      | "PersonalCare"
      | "Fitness"
      | "Subscriptions"
      | "BillsPayments"
      | "BusinessExpenses"
      | "Investments"
      | "Insurance"
      | "Gifts"
      | "Charity"
      | "Miscellaneous";
    ExpenseInput: {
      /** Format: double */
      amount: number;
      category: string;
      description?: string | null;
      line_items: components["schemas"]["ExpenseLineItem"][];
      name: string;
      /** Format: uuid */
      paid_by_member_id: string;
      /** Format: uuid */
      pool_id: string;
    };
    ExpenseLineItem: {
      /** Format: double */
      amount: number;
      /** Format: uuid */
      debtor_member_id: string;
    };
    FriendRequestInput: {
      friend_email: string;
    };
    LoginInput: {
      email: string;
      password: string;
    };
    Member: {
      bio?: string | null;
      email: string;
      first_name: string;
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      inserted_at: string;
      last_name: string;
      /** Format: date-time */
      updated_at: string;
    };
    MembersWithPoolStatus: {
      is_pool_member: boolean;
      member: components["schemas"]["Member"];
    };
    Pool: {
      description?: string | null;
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      inserted_at: string;
      name: string;
      /** Format: date-time */
      updated_at: string;
    };
    PoolDetails: components["schemas"]["Pool"] & {
      /** Format: double */
      total_debt: number;
    };
    PoolInput: {
      description?: string | null;
      name: string;
    };
    PoolMembership: {
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      inserted_at: string;
      /** Format: uuid */
      member_id: string;
      /** Format: uuid */
      pool_id: string;
      role: components["schemas"]["PoolRole"];
      /** Format: date-time */
      updated_at: string;
    };
    PoolMembershipInput: {
      /** Format: uuid */
      member_id: string;
    };
    /** @enum {string} */
    PoolRole: "PARTICIPANT" | "ADMIN";
    RecentExpenseDetails: components["schemas"]["Expense"] & {
      /** Format: double */
      line_amount: number;
    };
    SignupInput: {
      email: string;
      first_name: string;
      last_name: string;
      password: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  authenticate_handler: {
    parameters: {
      query: {
        /** @description Token to authenticate the member */
        token: string;
      };
      header?: never;
      path: {
        /** @description ID of the member to authenticate */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Authenticate a member successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuthResult"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  login_handler: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginInput"];
      };
    };
    responses: {
      /** @description Log in a member successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuthResult"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_member_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the member to fetch */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get a member successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Member"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  list_inbound_friend_requests_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the member to fetch friend requests for */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List inbound friend requests of a member successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Member"][];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  create_friend_request_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the member to create a friend request for */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FriendRequestInput"];
      };
    };
    responses: {
      /** @description Create a friend request successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  accept_friend_request_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the member accepting the request */
        member_id: string;
        /** @description ID of the friend request to accept */
        friend_member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Accept a friend request successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  list_friends_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the member to fetch friends for */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List friends of a member successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Member"][];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  list_pools_for_member_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the member to fetch pools for */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List pools for member */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Pool"][];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_expense_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the member to fetch expenses for */
        member_id: string;
        /** @description ID of the pool to fetch expenses for */
        pool_id: string;
        /** @description ID of the expense to fetch */
        expense_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get expenses */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  list_members_of_pool_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the pool to fetch members for */
        pool_id: string;
        /** @description ID of the member to fetch members for */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List all members of a pool successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["MembersWithPoolStatus"][];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  create_pool_handler: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PoolInput"];
      };
    };
    responses: {
      /** @description Create a pool successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Pool"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_pool_details_handler: {
    parameters: {
      query: {
        /** @description ID of the member to fetch details for */
        member_id: string;
      };
      header?: never;
      path: {
        /** @description ID of the pool to fetch details for */
        pool_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Create expense */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PoolDetails"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  add_expense_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the pool to add expense to */
        pool_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExpenseInput"];
      };
    };
    responses: {
      /** @description Create expense */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  add_friend_to_pool_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the pool to add a member to */
        pool_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PoolMembershipInput"];
      };
    };
    responses: {
      /** @description Add a friend to a pool successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PoolMembership"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  remove_friend_from_pool_handler: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of the pool */
        pool_id: string;
        /** @description ID of the member to remove */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Remove a friend from a pool successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  get_pool_recent_expenses_handler: {
    parameters: {
      query?: {
        /** @description Limit the number of expenses returned */
        limit?: number;
      };
      header?: never;
      path: {
        /** @description ID of the pool to fetch expenses for */
        pool_id: string;
        /** @description ID of the member to fetch expenses for */
        member_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Create expense */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RecentExpenseDetails"][];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  create_pool_membership_handler: {
    parameters: {
      query: {
        /** @description ID of the member to create membership for */
        member_id: string;
      };
      header?: never;
      path: {
        /** @description ID of the pool to create membership for */
        pool_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Create pool membership */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PoolMembership"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  signup_handler: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignupInput"];
      };
    };
    responses: {
      /** @description Get expenses */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["AuthResult"];
        };
      };
      /** @description Internal server error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
